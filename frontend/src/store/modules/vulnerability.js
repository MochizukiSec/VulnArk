import axios from 'axios'

const state = {
  vulnerabilities: [],
  vulnerability: null,
  loading: false,
  error: null,
  searchParams: {
    severity: '',
    status: '',
    assignedTo: '',
    searchTerm: '',
    sortBy: 'createdAt',
    sortOrder: 'desc',
    page: 1,
    perPage: 10
  },
  pagination: {
    total: 0,
    pages: 0
  }
}

const getters = {
  allVulnerabilities: state => state.vulnerabilities,
  currentVulnerability: state => state.vulnerability,
  isLoading: state => state.loading,
  error: state => state.error,
  searchParams: state => state.searchParams,
  pagination: state => state.pagination
}

const mutations = {
  SET_VULNERABILITIES(state, vulnerabilities) {
    state.vulnerabilities = vulnerabilities
  },
  
  SET_VULNERABILITY(state, vulnerability) {
    state.vulnerability = vulnerability
  },
  
  CLEAR_VULNERABILITY(state) {
    state.vulnerability = null
  },
  
  SET_LOADING(state, loading) {
    state.loading = loading
  },
  
  SET_ERROR(state, error) {
    state.error = error
  },
  
  SET_SEARCH_PARAMS(state, params) {
    state.searchParams = { ...state.searchParams, ...params }
  },
  
  SET_PAGINATION(state, pagination) {
    state.pagination = pagination
  },
  
  UPDATE_VULNERABILITY(state, { id, data }) {
    if (state.vulnerability && state.vulnerability.id === id) {
      state.vulnerability = { ...state.vulnerability, ...data }
    }
    
    const index = state.vulnerabilities.findIndex(v => v.id === id)
    if (index !== -1) {
      state.vulnerabilities[index] = { ...state.vulnerabilities[index], ...data }
    }
  },
  
  REMOVE_VULNERABILITY(state, id) {
    state.vulnerabilities = state.vulnerabilities.filter(v => v.id !== id)
    if (state.vulnerability && state.vulnerability.id === id) {
      state.vulnerability = null
    }
  }
}

const actions = {
  // 获取漏洞列表
  async fetchVulnerabilities({ commit, state }) {
    try {
      commit('SET_LOADING', true)
      
      // 构建查询参数
      const { severity, status, assignedTo, searchTerm, sortBy, sortOrder, page, perPage } = state.searchParams
      const params = { 
        severity, 
        status, 
        assignedTo, 
        q: searchTerm, // 前端使用 searchTerm，后端API使用 q 
        sortBy, 
        sortOrder, 
        page, 
        perPage 
      }
      
      // 移除未定义的参数
      Object.keys(params).forEach(key => {
        if (params[key] === undefined || params[key] === null || params[key] === '') {
          delete params[key]
        }
      })
      
      console.log('获取漏洞列表:', {
        baseURL: axios.defaults.baseURL,
        endpoint: '/api/vulnerabilities',
        params
      })
      
      const response = await axios.get('/api/vulnerabilities', { params })
      console.log('漏洞列表API响应:', response.data)
      
      // 更新状态
      let items = response.data.data || response.data.items || []
      let meta = response.data.meta || { total: items.length, pages: 1 }
      
      // 不再创建模拟数据
      if (items.length === 0) {
        console.log('API返回空数据')
        items = []
        meta = { total: 0, pages: 0, per_page: 10 }
      }
      
      commit('SET_VULNERABILITIES', items)
      commit('SET_PAGINATION', meta)
      commit('SET_LOADING', false)
      commit('SET_ERROR', null)
      
      return { data: items, meta }
    } catch (error) {
      console.error('获取漏洞列表失败:', error.response || error.message)
      
      // 不再创建模拟数据，而是返回空数组
      console.log('API请求失败，没有可用数据')
      const emptyItems = []
      const emptyMeta = { total: 0, pages: 0, per_page: 10 }
      
      commit('SET_VULNERABILITIES', emptyItems)
      commit('SET_PAGINATION', emptyMeta)
      commit('SET_LOADING', false)
      commit('SET_ERROR', null)
      
      return { data: emptyItems, meta: emptyMeta }
    }
  },
  
  // 根據ID獲取漏洞詳情 (別名方法，供VulnerabilityDetails調用)
  async fetchVulnerabilityById({ dispatch }, id) {
    return dispatch('fetchVulnerability', id)
  },
  
  // 获取单个漏洞详情
  async fetchVulnerability({ commit }, id) {
    try {
      commit('SET_LOADING', true)
      
      console.log('获取漏洞详情:', {
        baseURL: axios.defaults.baseURL,
        endpoint: `/api/vulnerabilities/${id}`
      })
      
      const response = await axios.get(`/api/vulnerabilities/${id}`)
      
      // 更新状态
      commit('SET_VULNERABILITY', response.data)
      commit('SET_LOADING', false)
      commit('SET_ERROR', null)
      
      return response.data
    } catch (error) {
      const message = error.response?.data?.error || '获取漏洞详情失败'
      commit('SET_ERROR', message)
      commit('SET_LOADING', false)
      throw error
    }
  },
  
  // 创建新漏洞
  async createVulnerability({ commit, dispatch }, vulnerabilityData) {
    try {
      commit('SET_LOADING', true)
      
      console.log('创建漏洞:', {
        baseURL: axios.defaults.baseURL,
        endpoint: '/api/vulnerabilities',
        data: vulnerabilityData
      })
      
      const response = await axios.post('/api/vulnerabilities', vulnerabilityData)
      
      // 更新状态
      commit('SET_LOADING', false)
      commit('SET_ERROR', null)
      
      // 添加成功通知
      dispatch('addNotification', {
        type: 'success',
        message: '漏洞已成功创建',
        title: '创建成功'
      }, { root: true })
      
      return response.data
    } catch (error) {
      const message = error.response?.data?.error || '创建漏洞失败'
      commit('SET_ERROR', message)
      commit('SET_LOADING', false)
      
      // 添加错误通知
      dispatch('addNotification', {
        type: 'error',
        message: message,
        title: '创建失败'
      }, { root: true })
      
      throw error
    }
  },
  
  // 更新漏洞
  async updateVulnerability({ commit, dispatch }, { id, data }) {
    try {
      commit('SET_LOADING', true)
      
      console.log('更新漏洞:', {
        baseURL: axios.defaults.baseURL,
        endpoint: `/api/vulnerabilities/${id}`,
        data
      })
      
      const response = await axios.put(`/api/vulnerabilities/${id}`, data)
      
      // 更新状态
      commit('UPDATE_VULNERABILITY', { id, data })
      commit('SET_LOADING', false)
      commit('SET_ERROR', null)
      
      // 添加成功通知
      dispatch('addNotification', {
        type: 'success',
        message: '漏洞已成功更新',
        title: '更新成功'
      }, { root: true })
      
      return response.data
    } catch (error) {
      const message = error.response?.data?.error || '更新漏洞失败'
      commit('SET_ERROR', message)
      commit('SET_LOADING', false)
      
      // 添加错误通知
      dispatch('addNotification', {
        type: 'error',
        message: message,
        title: '更新失败'
      }, { root: true })
      
      throw error
    }
  },
  
  // 删除漏洞
  async deleteVulnerability({ commit, dispatch }, id) {
    try {
      commit('SET_LOADING', true)
      
      console.log('删除漏洞:', {
        baseURL: axios.defaults.baseURL,
        endpoint: `/api/vulnerabilities/${id}`
      })
      
      await axios.delete(`/api/vulnerabilities/${id}`)
      
      // 更新状态
      commit('REMOVE_VULNERABILITY', id)
      commit('SET_LOADING', false)
      commit('SET_ERROR', null)
      
      // 添加成功通知
      dispatch('addNotification', {
        type: 'success',
        message: '漏洞已成功删除',
        title: '删除成功'
      }, { root: true })
      
      return { success: true }
    } catch (error) {
      const message = error.response?.data?.error || '删除漏洞失败'
      commit('SET_ERROR', message)
      commit('SET_LOADING', false)
      
      // 添加错误通知
      dispatch('addNotification', {
        type: 'error',
        message: message,
        title: '删除失败'
      }, { root: true })
      
      throw error
    }
  },
  
  // 导入漏洞
  async importVulnerabilities({ commit, dispatch }, importData) {
    try {
      commit('SET_LOADING', true)
      
      const response = await axios.post('/vulnerabilities/import', importData)
      
      // 更新状态
      commit('SET_LOADING', false)
      commit('SET_ERROR', null)
      
      // 添加成功通知
      dispatch('addNotification', {
        type: 'success',
        message: `成功导入 ${response.data.count} 个漏洞`,
        title: '导入成功'
      }, { root: true })
      
      return response.data
    } catch (error) {
      const message = error.response?.data?.error || '导入漏洞失败'
      commit('SET_ERROR', message)
      commit('SET_LOADING', false)
      
      // 添加错误通知
      dispatch('addNotification', {
        type: 'error',
        message: message,
        title: '导入失败'
      }, { root: true })
      
      throw error
    }
  },
  
  // 更新搜索参数
  updateSearchParams({ commit, dispatch }, params) {
    // 如果更改了非分页参数，重置页码
    if (Object.keys(params).some(key => key !== 'page' && key !== 'perPage')) {
      params.page = 1
    }
    
    commit('SET_SEARCH_PARAMS', params)
    dispatch('fetchVulnerabilities')
  },
  
  // 清除当前漏洞
  clearCurrentVulnerability({ commit }) {
    commit('CLEAR_VULNERABILITY')
  }
}

export default {
  namespaced: true,
  state,
  getters,
  mutations,
  actions
} 