{"ast":null,"code":"import { createStore } from 'vuex';\nimport auth from './modules/auth';\nimport vulnerability from './modules/vulnerability';\nimport dashboard from './modules/dashboard';\nimport user from './modules/user';\nexport default createStore({\n  state: {\n    loading: false,\n    error: null,\n    notifications: []\n  },\n  getters: {\n    isLoading: state => state.loading,\n    error: state => state.error,\n    notifications: state => state.notifications\n  },\n  mutations: {\n    SET_LOADING(state, loading) {\n      state.loading = loading;\n    },\n    SET_ERROR(state, error) {\n      state.error = error;\n    },\n    CLEAR_ERROR(state) {\n      state.error = null;\n    },\n    ADD_NOTIFICATION(state, notification) {\n      state.notifications.push({\n        id: Date.now(),\n        ...notification,\n        read: false,\n        timestamp: new Date()\n      });\n    },\n    MARK_NOTIFICATION_READ(state, id) {\n      const notification = state.notifications.find(n => n.id === id);\n      if (notification) {\n        notification.read = true;\n      }\n    },\n    CLEAR_NOTIFICATIONS(state) {\n      state.notifications = [];\n    }\n  },\n  actions: {\n    setLoading({\n      commit\n    }, loading) {\n      commit('SET_LOADING', loading);\n    },\n    setError({\n      commit\n    }, error) {\n      commit('SET_ERROR', error);\n    },\n    clearError({\n      commit\n    }) {\n      commit('CLEAR_ERROR');\n    },\n    addNotification({\n      commit\n    }, notification) {\n      commit('ADD_NOTIFICATION', notification);\n    },\n    markNotificationRead({\n      commit\n    }, id) {\n      commit('MARK_NOTIFICATION_READ', id);\n    },\n    clearNotifications({\n      commit\n    }) {\n      commit('CLEAR_NOTIFICATIONS');\n    }\n  },\n  modules: {\n    auth,\n    vulnerability,\n    dashboard,\n    user\n  }\n});","map":{"version":3,"names":["createStore","auth","vulnerability","dashboard","user","state","loading","error","notifications","getters","isLoading","mutations","SET_LOADING","SET_ERROR","CLEAR_ERROR","ADD_NOTIFICATION","notification","push","id","Date","now","read","timestamp","MARK_NOTIFICATION_READ","find","n","CLEAR_NOTIFICATIONS","actions","setLoading","commit","setError","clearError","addNotification","markNotificationRead","clearNotifications","modules"],"sources":["/Users/yue/Desktop/vuln-Management/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport auth from './modules/auth'\nimport vulnerability from './modules/vulnerability'\nimport dashboard from './modules/dashboard'\nimport user from './modules/user'\n\nexport default createStore({\n  state: {\n    loading: false,\n    error: null,\n    notifications: []\n  },\n  \n  getters: {\n    isLoading: state => state.loading,\n    error: state => state.error,\n    notifications: state => state.notifications\n  },\n  \n  mutations: {\n    SET_LOADING(state, loading) {\n      state.loading = loading\n    },\n    \n    SET_ERROR(state, error) {\n      state.error = error\n    },\n    \n    CLEAR_ERROR(state) {\n      state.error = null\n    },\n    \n    ADD_NOTIFICATION(state, notification) {\n      state.notifications.push({\n        id: Date.now(),\n        ...notification,\n        read: false,\n        timestamp: new Date()\n      })\n    },\n    \n    MARK_NOTIFICATION_READ(state, id) {\n      const notification = state.notifications.find(n => n.id === id)\n      if (notification) {\n        notification.read = true\n      }\n    },\n    \n    CLEAR_NOTIFICATIONS(state) {\n      state.notifications = []\n    }\n  },\n  \n  actions: {\n    setLoading({ commit }, loading) {\n      commit('SET_LOADING', loading)\n    },\n    \n    setError({ commit }, error) {\n      commit('SET_ERROR', error)\n    },\n    \n    clearError({ commit }) {\n      commit('CLEAR_ERROR')\n    },\n    \n    addNotification({ commit }, notification) {\n      commit('ADD_NOTIFICATION', notification)\n    },\n    \n    markNotificationRead({ commit }, id) {\n      commit('MARK_NOTIFICATION_READ', id)\n    },\n    \n    clearNotifications({ commit }) {\n      commit('CLEAR_NOTIFICATIONS')\n    }\n  },\n  \n  modules: {\n    auth,\n    vulnerability,\n    dashboard,\n    user\n  }\n}) "],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,IAAI,MAAM,gBAAgB;AACjC,OAAOC,aAAa,MAAM,yBAAyB;AACnD,OAAOC,SAAS,MAAM,qBAAqB;AAC3C,OAAOC,IAAI,MAAM,gBAAgB;AAEjC,eAAeJ,WAAW,CAAC;EACzBK,KAAK,EAAE;IACLC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE,IAAI;IACXC,aAAa,EAAE;EACjB,CAAC;EAEDC,OAAO,EAAE;IACPC,SAAS,EAAEL,KAAK,IAAIA,KAAK,CAACC,OAAO;IACjCC,KAAK,EAAEF,KAAK,IAAIA,KAAK,CAACE,KAAK;IAC3BC,aAAa,EAAEH,KAAK,IAAIA,KAAK,CAACG;EAChC,CAAC;EAEDG,SAAS,EAAE;IACTC,WAAWA,CAACP,KAAK,EAAEC,OAAO,EAAE;MAC1BD,KAAK,CAACC,OAAO,GAAGA,OAAO;IACzB,CAAC;IAEDO,SAASA,CAACR,KAAK,EAAEE,KAAK,EAAE;MACtBF,KAAK,CAACE,KAAK,GAAGA,KAAK;IACrB,CAAC;IAEDO,WAAWA,CAACT,KAAK,EAAE;MACjBA,KAAK,CAACE,KAAK,GAAG,IAAI;IACpB,CAAC;IAEDQ,gBAAgBA,CAACV,KAAK,EAAEW,YAAY,EAAE;MACpCX,KAAK,CAACG,aAAa,CAACS,IAAI,CAAC;QACvBC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;QACd,GAAGJ,YAAY;QACfK,IAAI,EAAE,KAAK;QACXC,SAAS,EAAE,IAAIH,IAAI,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC;IAEDI,sBAAsBA,CAAClB,KAAK,EAAEa,EAAE,EAAE;MAChC,MAAMF,YAAY,GAAGX,KAAK,CAACG,aAAa,CAACgB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACP,EAAE,KAAKA,EAAE,CAAC;MAC/D,IAAIF,YAAY,EAAE;QAChBA,YAAY,CAACK,IAAI,GAAG,IAAI;MAC1B;IACF,CAAC;IAEDK,mBAAmBA,CAACrB,KAAK,EAAE;MACzBA,KAAK,CAACG,aAAa,GAAG,EAAE;IAC1B;EACF,CAAC;EAEDmB,OAAO,EAAE;IACPC,UAAUA,CAAC;MAAEC;IAAO,CAAC,EAAEvB,OAAO,EAAE;MAC9BuB,MAAM,CAAC,aAAa,EAAEvB,OAAO,CAAC;IAChC,CAAC;IAEDwB,QAAQA,CAAC;MAAED;IAAO,CAAC,EAAEtB,KAAK,EAAE;MAC1BsB,MAAM,CAAC,WAAW,EAAEtB,KAAK,CAAC;IAC5B,CAAC;IAEDwB,UAAUA,CAAC;MAAEF;IAAO,CAAC,EAAE;MACrBA,MAAM,CAAC,aAAa,CAAC;IACvB,CAAC;IAEDG,eAAeA,CAAC;MAAEH;IAAO,CAAC,EAAEb,YAAY,EAAE;MACxCa,MAAM,CAAC,kBAAkB,EAAEb,YAAY,CAAC;IAC1C,CAAC;IAEDiB,oBAAoBA,CAAC;MAAEJ;IAAO,CAAC,EAAEX,EAAE,EAAE;MACnCW,MAAM,CAAC,wBAAwB,EAAEX,EAAE,CAAC;IACtC,CAAC;IAEDgB,kBAAkBA,CAAC;MAAEL;IAAO,CAAC,EAAE;MAC7BA,MAAM,CAAC,qBAAqB,CAAC;IAC/B;EACF,CAAC;EAEDM,OAAO,EAAE;IACPlC,IAAI;IACJC,aAAa;IACbC,SAAS;IACTC;EACF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}