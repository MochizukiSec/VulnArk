{"ast":null,"code":"import axios from 'axios';\nconst state = {\n  token: localStorage.getItem('token') || null,\n  user: JSON.parse(localStorage.getItem('user')) || null,\n  loading: false,\n  error: null\n};\nconst getters = {\n  isAuthenticated: state => !!state.token,\n  isAdmin: state => state.user && state.user.role === 'admin',\n  currentUser: state => state.user,\n  authError: state => state.error,\n  authLoading: state => state.loading\n};\nconst mutations = {\n  AUTH_REQUEST(state) {\n    state.loading = true;\n    state.error = null;\n  },\n  AUTH_SUCCESS(state, {\n    token,\n    user\n  }) {\n    state.token = token;\n    state.user = user;\n    state.loading = false;\n    state.error = null;\n  },\n  AUTH_ERROR(state, error) {\n    state.loading = false;\n    state.error = error;\n  },\n  LOGOUT(state) {\n    state.token = null;\n    state.user = null;\n  },\n  UPDATE_USER(state, user) {\n    state.user = {\n      ...state.user,\n      ...user\n    };\n  }\n};\nconst actions = {\n  // 用户登录\n  async login({\n    commit,\n    dispatch\n  }, credentials) {\n    try {\n      commit('AUTH_REQUEST');\n      const response = await axios.post('/auth/login', credentials);\n      const {\n        token,\n        user\n      } = response.data;\n\n      // 保存到本地存储\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n\n      // 更新状态\n      commit('AUTH_SUCCESS', {\n        token,\n        user\n      });\n\n      // 设置axios默认Authorization头\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // 添加欢迎通知\n      dispatch('addNotification', {\n        type: 'success',\n        message: `欢迎回来，${user.firstName}！`,\n        title: '登录成功'\n      }, {\n        root: true\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      const message = error.response?.data?.error || '登录失败，请检查您的凭据';\n      commit('AUTH_ERROR', message);\n      return {\n        success: false,\n        message\n      };\n    }\n  },\n  // 用户注册\n  async register({\n    commit,\n    dispatch\n  }, userData) {\n    try {\n      commit('AUTH_REQUEST');\n      const response = await axios.post('/auth/register', userData);\n      const {\n        token,\n        user\n      } = response.data;\n\n      // 保存到本地存储\n      localStorage.setItem('token', token);\n      localStorage.setItem('user', JSON.stringify(user));\n\n      // 更新状态\n      commit('AUTH_SUCCESS', {\n        token,\n        user\n      });\n\n      // 设置axios默认Authorization头\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n\n      // 添加欢迎通知\n      dispatch('addNotification', {\n        type: 'success',\n        message: `欢迎加入，${user.firstName}！`,\n        title: '注册成功'\n      }, {\n        root: true\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      const message = error.response?.data?.error || '注册失败，请检查输入信息';\n      commit('AUTH_ERROR', message);\n      return {\n        success: false,\n        message\n      };\n    }\n  },\n  // 恢复会话\n  async restoreSession({\n    commit,\n    state\n  }) {\n    if (!state.token) return;\n    try {\n      // 设置axios默认Authorization头\n      axios.defaults.headers.common['Authorization'] = `Bearer ${state.token}`;\n\n      // 尝试获取当前用户信息以验证令牌\n      const response = await axios.get('/users/me');\n      const user = response.data;\n\n      // 更新本地存储中的用户信息\n      localStorage.setItem('user', JSON.stringify(user));\n\n      // 更新状态\n      commit('UPDATE_USER', user);\n      return {\n        success: true\n      };\n    } catch (error) {\n      // 如果令牌无效，退出登录\n      if (error.response?.status === 401) {\n        commit('LOGOUT');\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        delete axios.defaults.headers.common['Authorization'];\n      }\n      return {\n        success: false\n      };\n    }\n  },\n  // 用户退出\n  logout({\n    commit\n  }) {\n    // 清除本地存储\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n\n    // 移除axios默认Authorization头\n    delete axios.defaults.headers.common['Authorization'];\n\n    // 更新状态\n    commit('LOGOUT');\n  },\n  // 更新用户信息\n  updateUserInfo({\n    commit\n  }, user) {\n    // 更新本地存储\n    localStorage.setItem('user', JSON.stringify({\n      ...state.user,\n      ...user\n    }));\n\n    // 更新状态\n    commit('UPDATE_USER', user);\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["axios","state","token","localStorage","getItem","user","JSON","parse","loading","error","getters","isAuthenticated","isAdmin","role","currentUser","authError","authLoading","mutations","AUTH_REQUEST","AUTH_SUCCESS","AUTH_ERROR","LOGOUT","UPDATE_USER","actions","login","commit","dispatch","credentials","response","post","data","setItem","stringify","defaults","headers","common","type","message","firstName","title","root","success","register","userData","restoreSession","get","status","removeItem","logout","updateUserInfo","namespaced"],"sources":["/Users/yue/Desktop/vuln-Management/frontend/src/store/modules/auth.js"],"sourcesContent":["import axios from 'axios'\n\nconst state = {\n  token: localStorage.getItem('token') || null,\n  user: JSON.parse(localStorage.getItem('user')) || null,\n  loading: false,\n  error: null\n}\n\nconst getters = {\n  isAuthenticated: state => !!state.token,\n  isAdmin: state => state.user && state.user.role === 'admin',\n  currentUser: state => state.user,\n  authError: state => state.error,\n  authLoading: state => state.loading\n}\n\nconst mutations = {\n  AUTH_REQUEST(state) {\n    state.loading = true\n    state.error = null\n  },\n  \n  AUTH_SUCCESS(state, { token, user }) {\n    state.token = token\n    state.user = user\n    state.loading = false\n    state.error = null\n  },\n  \n  AUTH_ERROR(state, error) {\n    state.loading = false\n    state.error = error\n  },\n  \n  LOGOUT(state) {\n    state.token = null\n    state.user = null\n  },\n  \n  UPDATE_USER(state, user) {\n    state.user = { ...state.user, ...user }\n  }\n}\n\nconst actions = {\n  // 用户登录\n  async login({ commit, dispatch }, credentials) {\n    try {\n      commit('AUTH_REQUEST')\n      \n      const response = await axios.post('/auth/login', credentials)\n      const { token, user } = response.data\n      \n      // 保存到本地存储\n      localStorage.setItem('token', token)\n      localStorage.setItem('user', JSON.stringify(user))\n      \n      // 更新状态\n      commit('AUTH_SUCCESS', { token, user })\n      \n      // 设置axios默认Authorization头\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`\n      \n      // 添加欢迎通知\n      dispatch('addNotification', {\n        type: 'success',\n        message: `欢迎回来，${user.firstName}！`,\n        title: '登录成功'\n      }, { root: true })\n      \n      return { success: true }\n    } catch (error) {\n      const message = error.response?.data?.error || '登录失败，请检查您的凭据'\n      commit('AUTH_ERROR', message)\n      return { success: false, message }\n    }\n  },\n  \n  // 用户注册\n  async register({ commit, dispatch }, userData) {\n    try {\n      commit('AUTH_REQUEST')\n      \n      const response = await axios.post('/auth/register', userData)\n      const { token, user } = response.data\n      \n      // 保存到本地存储\n      localStorage.setItem('token', token)\n      localStorage.setItem('user', JSON.stringify(user))\n      \n      // 更新状态\n      commit('AUTH_SUCCESS', { token, user })\n      \n      // 设置axios默认Authorization头\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`\n      \n      // 添加欢迎通知\n      dispatch('addNotification', {\n        type: 'success',\n        message: `欢迎加入，${user.firstName}！`,\n        title: '注册成功'\n      }, { root: true })\n      \n      return { success: true }\n    } catch (error) {\n      const message = error.response?.data?.error || '注册失败，请检查输入信息'\n      commit('AUTH_ERROR', message)\n      return { success: false, message }\n    }\n  },\n  \n  // 恢复会话\n  async restoreSession({ commit, state }) {\n    if (!state.token) return\n    \n    try {\n      // 设置axios默认Authorization头\n      axios.defaults.headers.common['Authorization'] = `Bearer ${state.token}`\n      \n      // 尝试获取当前用户信息以验证令牌\n      const response = await axios.get('/users/me')\n      const user = response.data\n      \n      // 更新本地存储中的用户信息\n      localStorage.setItem('user', JSON.stringify(user))\n      \n      // 更新状态\n      commit('UPDATE_USER', user)\n      \n      return { success: true }\n    } catch (error) {\n      // 如果令牌无效，退出登录\n      if (error.response?.status === 401) {\n        commit('LOGOUT')\n        localStorage.removeItem('token')\n        localStorage.removeItem('user')\n        delete axios.defaults.headers.common['Authorization']\n      }\n      return { success: false }\n    }\n  },\n  \n  // 用户退出\n  logout({ commit }) {\n    // 清除本地存储\n    localStorage.removeItem('token')\n    localStorage.removeItem('user')\n    \n    // 移除axios默认Authorization头\n    delete axios.defaults.headers.common['Authorization']\n    \n    // 更新状态\n    commit('LOGOUT')\n  },\n  \n  // 更新用户信息\n  updateUserInfo({ commit }, user) {\n    // 更新本地存储\n    localStorage.setItem('user', JSON.stringify({ ...state.user, ...user }))\n    \n    // 更新状态\n    commit('UPDATE_USER', user)\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}