{"ast":null,"code":"import { ref, reactive, computed } from 'vue';\nimport { ElMessage, ElMessageBox } from 'element-plus';\nexport default {\n  name: 'UserManagement',\n  setup() {\n    // 加载和提交状态\n    const loading = ref(false);\n    const submitting = ref(false);\n\n    // 筛选表单\n    const filterForm = reactive({\n      status: '',\n      role: '',\n      search: ''\n    });\n\n    // 分页信息\n    const pagination = reactive({\n      page: 1,\n      pageSize: 10,\n      total: 0\n    });\n\n    // 用户表单对话框\n    const userDialogVisible = ref(false);\n    const userFormRef = ref(null);\n    const isEditMode = ref(false);\n\n    // 用户表单\n    const userForm = reactive({\n      id: '',\n      username: '',\n      name: '',\n      email: '',\n      role: 'user',\n      status: 'active',\n      password: '',\n      confirmPassword: ''\n    });\n\n    // 表单验证规则\n    const userFormRules = {\n      username: [{\n        required: true,\n        message: '请输入用户名',\n        trigger: 'blur'\n      }, {\n        min: 3,\n        max: 20,\n        message: '用户名长度在3到20个字符之间',\n        trigger: 'blur'\n      }],\n      name: [{\n        required: true,\n        message: '请输入姓名',\n        trigger: 'blur'\n      }],\n      email: [{\n        required: true,\n        message: '请输入邮箱',\n        trigger: 'blur'\n      }, {\n        type: 'email',\n        message: '请输入有效的邮箱地址',\n        trigger: 'blur'\n      }],\n      role: [{\n        required: true,\n        message: '请选择角色',\n        trigger: 'change'\n      }],\n      status: [{\n        required: true,\n        message: '请选择状态',\n        trigger: 'change'\n      }],\n      password: [{\n        required: true,\n        message: '请输入密码',\n        trigger: 'blur'\n      }, {\n        min: 6,\n        message: '密码长度不能小于6个字符',\n        trigger: 'blur'\n      }],\n      confirmPassword: [{\n        required: true,\n        message: '请确认密码',\n        trigger: 'blur'\n      }, {\n        validator: (rule, value, callback) => {\n          if (value !== userForm.password) {\n            callback(new Error('两次输入的密码不一致'));\n          } else {\n            callback();\n          }\n        },\n        trigger: 'blur'\n      }]\n    };\n\n    // 模拟用户数据\n    const users = ref([{\n      id: '1',\n      username: 'admin',\n      name: '管理员',\n      email: 'admin@example.com',\n      role: 'admin',\n      status: 'active',\n      lastLogin: '2023-06-20T08:30:00Z',\n      avatar: ''\n    }, {\n      id: '2',\n      username: 'user1',\n      name: '张三',\n      email: 'user1@example.com',\n      role: 'user',\n      status: 'active',\n      lastLogin: '2023-06-19T14:20:00Z',\n      avatar: ''\n    }, {\n      id: '3',\n      username: 'user2',\n      name: '李四',\n      email: 'user2@example.com',\n      role: 'readonly',\n      status: 'inactive',\n      lastLogin: null,\n      avatar: ''\n    }, {\n      id: '4',\n      username: 'user3',\n      name: '王五',\n      email: 'user3@example.com',\n      role: 'user',\n      status: 'disabled',\n      lastLogin: '2023-05-10T09:15:00Z',\n      avatar: ''\n    }]);\n\n    // 计算总用户数\n    pagination.total = computed(() => users.value.length).value;\n\n    // 获取角色显示名称\n    const getRoleDisplayName = role => {\n      const roleMap = {\n        admin: '管理员',\n        user: '普通用户',\n        readonly: '只读用户'\n      };\n      return roleMap[role] || role;\n    };\n\n    // 获取角色标签类型\n    const getRoleTagType = role => {\n      const typeMap = {\n        admin: 'danger',\n        user: 'primary',\n        readonly: 'info'\n      };\n      return typeMap[role] || '';\n    };\n\n    // 获取状态显示名称\n    const getStatusDisplayName = status => {\n      const statusMap = {\n        active: '已激活',\n        inactive: '未激活',\n        disabled: '已禁用'\n      };\n      return statusMap[status] || status;\n    };\n\n    // 获取状态标签类型\n    const getStatusTagType = status => {\n      const typeMap = {\n        active: 'success',\n        inactive: 'warning',\n        disabled: 'info'\n      };\n      return typeMap[status] || '';\n    };\n\n    // 格式化日期时间\n    const formatDateTime = dateTimeString => {\n      if (!dateTimeString) return '从未登录';\n      const date = new Date(dateTimeString);\n      return date.toLocaleDateString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    };\n\n    // 搜索用户\n    const searchUsers = () => {\n      loading.value = true;\n\n      // 实际应用中，这里应该调用API进行搜索\n      // 模拟异步搜索\n      setTimeout(() => {\n        loading.value = false;\n      }, 500);\n    };\n\n    // 重置筛选条件\n    const resetFilter = () => {\n      Object.assign(filterForm, {\n        status: '',\n        role: '',\n        search: ''\n      });\n      searchUsers();\n    };\n\n    // 处理分页大小变化\n    const handleSizeChange = size => {\n      pagination.pageSize = size;\n      searchUsers();\n    };\n\n    // 处理页码变化\n    const handleCurrentChange = page => {\n      pagination.page = page;\n      searchUsers();\n    };\n\n    // 显示添加用户对话框\n    const showAddUserDialog = () => {\n      isEditMode.value = false;\n      resetUserForm();\n      userDialogVisible.value = true;\n    };\n\n    // 编辑用户\n    const editUser = user => {\n      isEditMode.value = true;\n      resetUserForm();\n\n      // 填充表单数据\n      Object.assign(userForm, {\n        id: user.id,\n        username: user.username,\n        name: user.name,\n        email: user.email,\n        role: user.role,\n        status: user.status\n      });\n      userDialogVisible.value = true;\n    };\n\n    // 重置用户表单\n    const resetUserForm = () => {\n      Object.assign(userForm, {\n        id: '',\n        username: '',\n        name: '',\n        email: '',\n        role: 'user',\n        status: 'active',\n        password: '',\n        confirmPassword: ''\n      });\n\n      // 重置表单验证\n      if (userFormRef.value) {\n        userFormRef.value.resetFields();\n      }\n    };\n\n    // 提交用户表单\n    const submitUserForm = async () => {\n      if (!userFormRef.value) return;\n      await userFormRef.value.validate(async valid => {\n        if (!valid) {\n          return false;\n        }\n        submitting.value = true;\n        try {\n          if (isEditMode.value) {\n            // 更新现有用户\n            const index = users.value.findIndex(u => u.id === userForm.id);\n            if (index !== -1) {\n              const updatedUser = {\n                ...users.value[index],\n                ...userForm\n              };\n              users.value.splice(index, 1, updatedUser);\n              ElMessage.success('用户已更新');\n            }\n          } else {\n            // 添加新用户\n            const newUser = {\n              id: Date.now().toString(),\n              username: userForm.username,\n              name: userForm.name,\n              email: userForm.email,\n              role: userForm.role,\n              status: userForm.status,\n              lastLogin: null,\n              avatar: ''\n            };\n            users.value.unshift(newUser);\n            pagination.total += 1;\n            ElMessage.success('用户已添加');\n          }\n          userDialogVisible.value = false;\n        } catch (error) {\n          ElMessage.error('操作失败: ' + (error.message || '未知错误'));\n        } finally {\n          submitting.value = false;\n        }\n      });\n    };\n\n    // 切换用户状态\n    const toggleUserStatus = user => {\n      const newStatus = user.status === 'active' ? 'disabled' : 'active';\n      const action = newStatus === 'active' ? '启用' : '禁用';\n      ElMessageBox.confirm(`确定要${action}用户 \"${user.username}\" 吗？`, '确认操作', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        // 更新用户状态\n        const index = users.value.findIndex(u => u.id === user.id);\n        if (index !== -1) {\n          users.value[index].status = newStatus;\n          ElMessage.success(`用户已${action}`);\n        }\n      }).catch(() => {\n        // 用户取消操作\n      });\n    };\n\n    // 确认删除用户\n    const confirmDeleteUser = user => {\n      ElMessageBox.confirm(`确定要删除用户 \"${user.username}\" 吗？此操作不可撤销。`, '删除确认', {\n        confirmButtonText: '删除',\n        cancelButtonText: '取消',\n        type: 'danger'\n      }).then(() => {\n        // 删除用户\n        const index = users.value.findIndex(u => u.id === user.id);\n        if (index !== -1) {\n          users.value.splice(index, 1);\n          pagination.total -= 1;\n          ElMessage.success('用户已删除');\n        }\n      }).catch(() => {\n        // 用户取消删除\n      });\n    };\n    return {\n      loading,\n      submitting,\n      filterForm,\n      pagination,\n      users,\n      userDialogVisible,\n      userFormRef,\n      userForm,\n      userFormRules,\n      isEditMode,\n      getRoleDisplayName,\n      getRoleTagType,\n      getStatusDisplayName,\n      getStatusTagType,\n      formatDateTime,\n      searchUsers,\n      resetFilter,\n      handleSizeChange,\n      handleCurrentChange,\n      showAddUserDialog,\n      editUser,\n      submitUserForm,\n      toggleUserStatus,\n      confirmDeleteUser\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","computed","ElMessage","ElMessageBox","name","setup","loading","submitting","filterForm","status","role","search","pagination","page","pageSize","total","userDialogVisible","userFormRef","isEditMode","userForm","id","username","email","password","confirmPassword","userFormRules","required","message","trigger","min","max","type","validator","rule","value","callback","Error","users","lastLogin","avatar","length","getRoleDisplayName","roleMap","admin","user","readonly","getRoleTagType","typeMap","getStatusDisplayName","statusMap","active","inactive","disabled","getStatusTagType","formatDateTime","dateTimeString","date","Date","toLocaleDateString","year","month","day","hour","minute","searchUsers","setTimeout","resetFilter","Object","assign","handleSizeChange","size","handleCurrentChange","showAddUserDialog","resetUserForm","editUser","resetFields","submitUserForm","validate","valid","index","findIndex","u","updatedUser","splice","success","newUser","now","toString","unshift","error","toggleUserStatus","newStatus","action","confirm","confirmButtonText","cancelButtonText","then","catch","confirmDeleteUser"],"sources":["/Users/yue/Desktop/vuln-Management/frontend/src/views/admin/UserManagement.vue"],"sourcesContent":["<template>\n  <div class=\"user-management-page\">\n    <div class=\"page-header\">\n      <div class=\"header-content\">\n        <h1 class=\"page-title\">用户管理</h1>\n        <p class=\"page-subtitle\">管理系统用户、权限和组织结构</p>\n      </div>\n      <div class=\"header-actions\">\n        <el-button type=\"primary\" @click=\"showAddUserDialog\">\n          <i class=\"el-icon-plus\"></i> 添加用户\n        </el-button>\n      </div>\n    </div>\n\n    <!-- 用户筛选和搜索 -->\n    <el-card shadow=\"hover\" class=\"filter-card\">\n      <el-form :inline=\"true\" :model=\"filterForm\" class=\"filter-form\">\n        <el-form-item label=\"状态\">\n          <el-select v-model=\"filterForm.status\" placeholder=\"选择状态\" clearable>\n            <el-option label=\"已激活\" value=\"active\" />\n            <el-option label=\"未激活\" value=\"inactive\" />\n            <el-option label=\"已禁用\" value=\"disabled\" />\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item label=\"角色\">\n          <el-select v-model=\"filterForm.role\" placeholder=\"选择角色\" clearable>\n            <el-option label=\"管理员\" value=\"admin\" />\n            <el-option label=\"普通用户\" value=\"user\" />\n            <el-option label=\"只读用户\" value=\"readonly\" />\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item label=\"搜索\">\n          <el-input \n            v-model=\"filterForm.search\" \n            placeholder=\"搜索用户名、邮箱或姓名\"\n            clearable\n          />\n        </el-form-item>\n        \n        <el-form-item>\n          <el-button type=\"primary\" @click=\"searchUsers\">搜索</el-button>\n          <el-button @click=\"resetFilter\">重置</el-button>\n        </el-form-item>\n      </el-form>\n    </el-card>\n\n    <!-- 用户列表 -->\n    <el-card shadow=\"hover\" class=\"user-table-card\">\n      <div v-loading=\"loading\">\n        <el-table \n          :data=\"users\" \n          border \n          style=\"width: 100%\"\n        >\n          <el-table-column prop=\"username\" label=\"用户名\" min-width=\"120\">\n            <template #default=\"scope\">\n              <div class=\"user-info\">\n                <el-avatar :size=\"32\" :src=\"scope.row.avatar\">\n                  {{ scope.row.username.charAt(0).toUpperCase() }}\n                </el-avatar>\n                <span class=\"username\">{{ scope.row.username }}</span>\n              </div>\n            </template>\n          </el-table-column>\n          \n          <el-table-column prop=\"name\" label=\"姓名\" min-width=\"120\" />\n          \n          <el-table-column prop=\"email\" label=\"邮箱\" min-width=\"180\" />\n          \n          <el-table-column prop=\"role\" label=\"角色\" width=\"120\">\n            <template #default=\"scope\">\n              <el-tag :type=\"getRoleTagType(scope.row.role)\">\n                {{ getRoleDisplayName(scope.row.role) }}\n              </el-tag>\n            </template>\n          </el-table-column>\n          \n          <el-table-column prop=\"status\" label=\"状态\" width=\"100\">\n            <template #default=\"scope\">\n              <el-tag :type=\"getStatusTagType(scope.row.status)\">\n                {{ getStatusDisplayName(scope.row.status) }}\n              </el-tag>\n            </template>\n          </el-table-column>\n          \n          <el-table-column prop=\"lastLogin\" label=\"最后登录\" width=\"160\">\n            <template #default=\"scope\">\n              {{ formatDateTime(scope.row.lastLogin) }}\n            </template>\n          </el-table-column>\n          \n          <el-table-column label=\"操作\" width=\"200\" fixed=\"right\">\n            <template #default=\"scope\">\n              <el-button \n                size=\"small\" \n                type=\"primary\" \n                link\n                @click=\"editUser(scope.row)\"\n              >\n                编辑\n              </el-button>\n              \n              <el-button \n                size=\"small\" \n                :type=\"scope.row.status === 'active' ? 'warning' : 'success'\" \n                link\n                @click=\"toggleUserStatus(scope.row)\"\n              >\n                {{ scope.row.status === 'active' ? '禁用' : '启用' }}\n              </el-button>\n              \n              <el-button \n                size=\"small\" \n                type=\"danger\" \n                link\n                @click=\"confirmDeleteUser(scope.row)\"\n              >\n                删除\n              </el-button>\n            </template>\n          </el-table-column>\n        </el-table>\n        \n        <!-- 分页 -->\n        <div class=\"pagination-container\">\n          <el-pagination\n            v-model:currentPage=\"pagination.page\"\n            v-model:page-size=\"pagination.pageSize\"\n            :page-sizes=\"[10, 20, 50, 100]\"\n            layout=\"total, sizes, prev, pager, next, jumper\"\n            :total=\"pagination.total\"\n            @size-change=\"handleSizeChange\"\n            @current-change=\"handleCurrentChange\"\n          />\n        </div>\n      </div>\n    </el-card>\n\n    <!-- 添加/编辑用户对话框 -->\n    <el-dialog\n      :title=\"isEditMode ? '编辑用户' : '添加用户'\"\n      v-model=\"userDialogVisible\"\n      width=\"500px\"\n    >\n      <el-form \n        ref=\"userFormRef\"\n        :model=\"userForm\" \n        :rules=\"userFormRules\" \n        label-width=\"100px\"\n      >\n        <el-form-item label=\"用户名\" prop=\"username\">\n          <el-input v-model=\"userForm.username\" :disabled=\"isEditMode\" />\n        </el-form-item>\n        \n        <el-form-item label=\"姓名\" prop=\"name\">\n          <el-input v-model=\"userForm.name\" />\n        </el-form-item>\n        \n        <el-form-item label=\"邮箱\" prop=\"email\">\n          <el-input v-model=\"userForm.email\" type=\"email\" />\n        </el-form-item>\n        \n        <el-form-item label=\"角色\" prop=\"role\">\n          <el-select v-model=\"userForm.role\" style=\"width: 100%\">\n            <el-option label=\"管理员\" value=\"admin\" />\n            <el-option label=\"普通用户\" value=\"user\" />\n            <el-option label=\"只读用户\" value=\"readonly\" />\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item label=\"状态\" prop=\"status\">\n          <el-select v-model=\"userForm.status\" style=\"width: 100%\">\n            <el-option label=\"已激活\" value=\"active\" />\n            <el-option label=\"未激活\" value=\"inactive\" />\n            <el-option label=\"已禁用\" value=\"disabled\" />\n          </el-select>\n        </el-form-item>\n        \n        <el-form-item label=\"密码\" prop=\"password\" v-if=\"!isEditMode\">\n          <el-input v-model=\"userForm.password\" type=\"password\" />\n        </el-form-item>\n        \n        <el-form-item label=\"确认密码\" prop=\"confirmPassword\" v-if=\"!isEditMode\">\n          <el-input v-model=\"userForm.confirmPassword\" type=\"password\" />\n        </el-form-item>\n      </el-form>\n      \n      <template #footer>\n        <el-button @click=\"userDialogVisible = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"submitUserForm\" :loading=\"submitting\">\n          {{ isEditMode ? '保存' : '添加' }}\n        </el-button>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, computed } from 'vue'\nimport { ElMessage, ElMessageBox } from 'element-plus'\n\nexport default {\n  name: 'UserManagement',\n  \n  setup() {\n    // 加载和提交状态\n    const loading = ref(false)\n    const submitting = ref(false)\n    \n    // 筛选表单\n    const filterForm = reactive({\n      status: '',\n      role: '',\n      search: ''\n    })\n    \n    // 分页信息\n    const pagination = reactive({\n      page: 1,\n      pageSize: 10,\n      total: 0\n    })\n    \n    // 用户表单对话框\n    const userDialogVisible = ref(false)\n    const userFormRef = ref(null)\n    const isEditMode = ref(false)\n    \n    // 用户表单\n    const userForm = reactive({\n      id: '',\n      username: '',\n      name: '',\n      email: '',\n      role: 'user',\n      status: 'active',\n      password: '',\n      confirmPassword: ''\n    })\n    \n    // 表单验证规则\n    const userFormRules = {\n      username: [\n        { required: true, message: '请输入用户名', trigger: 'blur' },\n        { min: 3, max: 20, message: '用户名长度在3到20个字符之间', trigger: 'blur' }\n      ],\n      name: [\n        { required: true, message: '请输入姓名', trigger: 'blur' }\n      ],\n      email: [\n        { required: true, message: '请输入邮箱', trigger: 'blur' },\n        { type: 'email', message: '请输入有效的邮箱地址', trigger: 'blur' }\n      ],\n      role: [\n        { required: true, message: '请选择角色', trigger: 'change' }\n      ],\n      status: [\n        { required: true, message: '请选择状态', trigger: 'change' }\n      ],\n      password: [\n        { required: true, message: '请输入密码', trigger: 'blur' },\n        { min: 6, message: '密码长度不能小于6个字符', trigger: 'blur' }\n      ],\n      confirmPassword: [\n        { required: true, message: '请确认密码', trigger: 'blur' },\n        {\n          validator: (rule, value, callback) => {\n            if (value !== userForm.password) {\n              callback(new Error('两次输入的密码不一致'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }\n      ]\n    }\n    \n    // 模拟用户数据\n    const users = ref([\n      {\n        id: '1',\n        username: 'admin',\n        name: '管理员',\n        email: 'admin@example.com',\n        role: 'admin',\n        status: 'active',\n        lastLogin: '2023-06-20T08:30:00Z',\n        avatar: ''\n      },\n      {\n        id: '2',\n        username: 'user1',\n        name: '张三',\n        email: 'user1@example.com',\n        role: 'user',\n        status: 'active',\n        lastLogin: '2023-06-19T14:20:00Z',\n        avatar: ''\n      },\n      {\n        id: '3',\n        username: 'user2',\n        name: '李四',\n        email: 'user2@example.com',\n        role: 'readonly',\n        status: 'inactive',\n        lastLogin: null,\n        avatar: ''\n      },\n      {\n        id: '4',\n        username: 'user3',\n        name: '王五',\n        email: 'user3@example.com',\n        role: 'user',\n        status: 'disabled',\n        lastLogin: '2023-05-10T09:15:00Z',\n        avatar: ''\n      }\n    ])\n    \n    // 计算总用户数\n    pagination.total = computed(() => users.value.length).value\n    \n    // 获取角色显示名称\n    const getRoleDisplayName = (role) => {\n      const roleMap = {\n        admin: '管理员',\n        user: '普通用户',\n        readonly: '只读用户'\n      }\n      return roleMap[role] || role\n    }\n    \n    // 获取角色标签类型\n    const getRoleTagType = (role) => {\n      const typeMap = {\n        admin: 'danger',\n        user: 'primary',\n        readonly: 'info'\n      }\n      return typeMap[role] || ''\n    }\n    \n    // 获取状态显示名称\n    const getStatusDisplayName = (status) => {\n      const statusMap = {\n        active: '已激活',\n        inactive: '未激活',\n        disabled: '已禁用'\n      }\n      return statusMap[status] || status\n    }\n    \n    // 获取状态标签类型\n    const getStatusTagType = (status) => {\n      const typeMap = {\n        active: 'success',\n        inactive: 'warning',\n        disabled: 'info'\n      }\n      return typeMap[status] || ''\n    }\n    \n    // 格式化日期时间\n    const formatDateTime = (dateTimeString) => {\n      if (!dateTimeString) return '从未登录'\n      \n      const date = new Date(dateTimeString)\n      return date.toLocaleDateString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      })\n    }\n    \n    // 搜索用户\n    const searchUsers = () => {\n      loading.value = true\n      \n      // 实际应用中，这里应该调用API进行搜索\n      // 模拟异步搜索\n      setTimeout(() => {\n        loading.value = false\n      }, 500)\n    }\n    \n    // 重置筛选条件\n    const resetFilter = () => {\n      Object.assign(filterForm, {\n        status: '',\n        role: '',\n        search: ''\n      })\n      searchUsers()\n    }\n    \n    // 处理分页大小变化\n    const handleSizeChange = (size) => {\n      pagination.pageSize = size\n      searchUsers()\n    }\n    \n    // 处理页码变化\n    const handleCurrentChange = (page) => {\n      pagination.page = page\n      searchUsers()\n    }\n    \n    // 显示添加用户对话框\n    const showAddUserDialog = () => {\n      isEditMode.value = false\n      resetUserForm()\n      userDialogVisible.value = true\n    }\n    \n    // 编辑用户\n    const editUser = (user) => {\n      isEditMode.value = true\n      resetUserForm()\n      \n      // 填充表单数据\n      Object.assign(userForm, {\n        id: user.id,\n        username: user.username,\n        name: user.name,\n        email: user.email,\n        role: user.role,\n        status: user.status\n      })\n      \n      userDialogVisible.value = true\n    }\n    \n    // 重置用户表单\n    const resetUserForm = () => {\n      Object.assign(userForm, {\n        id: '',\n        username: '',\n        name: '',\n        email: '',\n        role: 'user',\n        status: 'active',\n        password: '',\n        confirmPassword: ''\n      })\n      \n      // 重置表单验证\n      if (userFormRef.value) {\n        userFormRef.value.resetFields()\n      }\n    }\n    \n    // 提交用户表单\n    const submitUserForm = async () => {\n      if (!userFormRef.value) return\n      \n      await userFormRef.value.validate(async (valid) => {\n        if (!valid) {\n          return false\n        }\n        \n        submitting.value = true\n        \n        try {\n          if (isEditMode.value) {\n            // 更新现有用户\n            const index = users.value.findIndex(u => u.id === userForm.id)\n            if (index !== -1) {\n              const updatedUser = { ...users.value[index], ...userForm }\n              users.value.splice(index, 1, updatedUser)\n              ElMessage.success('用户已更新')\n            }\n          } else {\n            // 添加新用户\n            const newUser = {\n              id: Date.now().toString(),\n              username: userForm.username,\n              name: userForm.name,\n              email: userForm.email,\n              role: userForm.role,\n              status: userForm.status,\n              lastLogin: null,\n              avatar: ''\n            }\n            users.value.unshift(newUser)\n            pagination.total += 1\n            ElMessage.success('用户已添加')\n          }\n          \n          userDialogVisible.value = false\n        } catch (error) {\n          ElMessage.error('操作失败: ' + (error.message || '未知错误'))\n        } finally {\n          submitting.value = false\n        }\n      })\n    }\n    \n    // 切换用户状态\n    const toggleUserStatus = (user) => {\n      const newStatus = user.status === 'active' ? 'disabled' : 'active'\n      const action = newStatus === 'active' ? '启用' : '禁用'\n      \n      ElMessageBox.confirm(\n        `确定要${action}用户 \"${user.username}\" 吗？`,\n        '确认操作',\n        {\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          type: 'warning'\n        }\n      ).then(() => {\n        // 更新用户状态\n        const index = users.value.findIndex(u => u.id === user.id)\n        if (index !== -1) {\n          users.value[index].status = newStatus\n          ElMessage.success(`用户已${action}`)\n        }\n      }).catch(() => {\n        // 用户取消操作\n      })\n    }\n    \n    // 确认删除用户\n    const confirmDeleteUser = (user) => {\n      ElMessageBox.confirm(\n        `确定要删除用户 \"${user.username}\" 吗？此操作不可撤销。`,\n        '删除确认',\n        {\n          confirmButtonText: '删除',\n          cancelButtonText: '取消',\n          type: 'danger'\n        }\n      ).then(() => {\n        // 删除用户\n        const index = users.value.findIndex(u => u.id === user.id)\n        if (index !== -1) {\n          users.value.splice(index, 1)\n          pagination.total -= 1\n          ElMessage.success('用户已删除')\n        }\n      }).catch(() => {\n        // 用户取消删除\n      })\n    }\n    \n    return {\n      loading,\n      submitting,\n      filterForm,\n      pagination,\n      users,\n      userDialogVisible,\n      userFormRef,\n      userForm,\n      userFormRules,\n      isEditMode,\n      getRoleDisplayName,\n      getRoleTagType,\n      getStatusDisplayName,\n      getStatusTagType,\n      formatDateTime,\n      searchUsers,\n      resetFilter,\n      handleSizeChange,\n      handleCurrentChange,\n      showAddUserDialog,\n      editUser,\n      submitUserForm,\n      toggleUserStatus,\n      confirmDeleteUser\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.user-management-page {\n  margin-bottom: 40px;\n}\n\n.page-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 24px;\n  flex-wrap: wrap;\n  gap: 16px;\n}\n\n.page-title {\n  font-size: 24px;\n  font-weight: 600;\n  margin: 0;\n  color: #303133;\n}\n\n.page-subtitle {\n  color: #909399;\n  margin: 4px 0 0;\n}\n\n.filter-card {\n  margin-bottom: 24px;\n}\n\n.filter-form {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 10px;\n}\n\n.user-table-card {\n  margin-bottom: 24px;\n}\n\n.pagination-container {\n  margin-top: 20px;\n  display: flex;\n  justify-content: flex-end;\n}\n\n.user-info {\n  display: flex;\n  align-items: center;\n  gap: 8px;\n}\n\n.username {\n  font-weight: 500;\n}\n\n@media (max-width: 768px) {\n  .page-header {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n  \n  .filter-form {\n    flex-direction: column;\n  }\n  \n  .el-form-item {\n    margin-bottom: 10px;\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}