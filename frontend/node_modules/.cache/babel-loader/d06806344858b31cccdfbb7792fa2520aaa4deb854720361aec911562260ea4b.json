{"ast":null,"code":"import _slicedToArray from \"/Users/yue/Desktop/vuln-Management/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/Users/yue/Desktop/vuln-Management/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.map.js\";\nimport \"core-js/modules/es.iterator.reduce.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nexport default {\n  name: 'TrendPredictionDetail',\n  props: {\n    analysisData: {\n      type: Object,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      chartSettings: {\n        labelMap: {\n          'count': '漏洞数量'\n        },\n        yAxisName: ['数量'],\n        area: true,\n        smooth: true\n      },\n      chartExtend: {\n        series: {\n          areaStyle: {\n            color: {\n              type: 'linear',\n              x: 0,\n              y: 0,\n              x2: 0,\n              y2: 1,\n              colorStops: [{\n                offset: 0,\n                color: 'rgba(64, 158, 255, 0.8)'\n              }, {\n                offset: 1,\n                color: 'rgba(64, 158, 255, 0.1)'\n              }]\n            }\n          },\n          lineStyle: {\n            width: 3\n          },\n          itemStyle: {\n            borderWidth: 2\n          }\n        },\n        xAxis: {\n          axisLabel: {\n            showMaxLabel: true\n          }\n        }\n      },\n      pieSettings: {\n        radius: '65%',\n        offsetY: '60px'\n      }\n    };\n  },\n  computed: {\n    chartData: function chartData() {\n      var _this = this,\n        _historyRows;\n      // 准备历史数据\n      var historyRows = this.analysisData.historicalData.map(function (item) {\n        return {\n          'date': _this.formatDateShort(item.date),\n          'count': item.count\n        };\n      });\n\n      // 生成预测数据\n      var predictionDates = this.generateFutureDates();\n\n      // 计算预测趋势值（简单示例）\n      var predictedTotal = Object.values(this.analysisData.predictedCounts).reduce(function (a, b) {\n        return a + b;\n      }, 0);\n      var lastHistoryValue = ((_historyRows = historyRows[historyRows.length - 1]) === null || _historyRows === void 0 ? void 0 : _historyRows.count) || 0;\n      var predictionSteps = predictionDates.length;\n      var predictionIncrement = (predictedTotal / predictionSteps - lastHistoryValue) / predictionSteps;\n      var predictionRows = predictionDates.map(function (date, index) {\n        return {\n          'date': _this.formatDateShort(date),\n          'count': Math.round(lastHistoryValue + predictionIncrement * (index + 1))\n        };\n      });\n\n      // 合并数据，并标记历史和预测的分界点\n      var boundary = historyRows.length;\n      var rows = [].concat(_toConsumableArray(historyRows), _toConsumableArray(predictionRows));\n      return {\n        columns: ['date', 'count'],\n        rows: rows,\n        boundary: boundary\n      };\n    },\n    breakdownChartData: function breakdownChartData() {\n      var rows = Object.entries(this.analysisData.predictedCounts).map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          severity = _ref2[0],\n          count = _ref2[1];\n        return {\n          'severity': severity,\n          'count': count\n        };\n      });\n      return {\n        columns: ['severity', 'count'],\n        rows: rows\n      };\n    }\n  },\n  methods: {\n    formatDateShort: function formatDateShort(date) {\n      var d = new Date(date);\n      return \"\".concat(d.getMonth() + 1, \"/\").concat(d.getDate());\n    },\n    generateFutureDates: function generateFutureDates() {\n      // 根据时间范围生成未来日期\n      var days = this.getTimeRangeDays();\n      var today = new Date();\n      return Array.from({\n        length: days\n      }, function (_, i) {\n        var date = new Date(today);\n        date.setDate(date.getDate() + i + 1);\n        return date;\n      });\n    },\n    getTimeRangeDays: function getTimeRangeDays() {\n      // 将时间范围转换为天数\n      var range = this.analysisData.timeRange;\n      if (range.includes('7')) return 7;\n      if (range.includes('14')) return 14;\n      if (range.includes('30')) return 30;\n      if (range.includes('90')) return 90;\n      return 30; // 默认30天\n    },\n    formatImpact: function formatImpact(impact) {\n      var value = (impact * 100).toFixed(0);\n      return impact >= 0 ? \"+\".concat(value, \"%\") : \"\".concat(value, \"%\");\n    },\n    calculatePercentage: function calculatePercentage(value) {\n      var total = Object.values(this.analysisData.predictedCounts).reduce(function (a, b) {\n        return a + b;\n      }, 0);\n      return total > 0 ? value / total * 100 : 0;\n    },\n    getSeverityColor: function getSeverityColor(severity) {\n      var colorMap = {\n        '高危': '#F56C6C',\n        '中危': '#E6A23C',\n        '低危': '#67C23A',\n        '信息': '#909399'\n      };\n      return colorMap[severity] || '#409EFF';\n    },\n    percentFormat: function percentFormat(percentage) {\n      return percentage.toFixed(0) + '%';\n    }\n  }\n};","map":{"version":3,"names":["name","props","analysisData","type","Object","required","data","chartSettings","labelMap","yAxisName","area","smooth","chartExtend","series","areaStyle","color","x","y","x2","y2","colorStops","offset","lineStyle","width","itemStyle","borderWidth","xAxis","axisLabel","showMaxLabel","pieSettings","radius","offsetY","computed","chartData","_this","_historyRows","historyRows","historicalData","map","item","formatDateShort","date","count","predictionDates","generateFutureDates","predictedTotal","values","predictedCounts","reduce","a","b","lastHistoryValue","length","predictionSteps","predictionIncrement","predictionRows","index","Math","round","boundary","rows","concat","_toConsumableArray","columns","breakdownChartData","entries","_ref","_ref2","_slicedToArray","severity","methods","d","Date","getMonth","getDate","days","getTimeRangeDays","today","Array","from","_","i","setDate","range","timeRange","includes","formatImpact","impact","value","toFixed","calculatePercentage","total","getSeverityColor","colorMap","percentFormat","percentage"],"sources":["/Users/yue/Desktop/vuln-Management/frontend/src/components/ai/details/TrendPredictionDetail.vue"],"sourcesContent":["<template>\n  <div class=\"trend-prediction-detail\">\n    <!-- 预测结果卡片 -->\n    <el-card class=\"detail-card\">\n      <template v-slot:header>\n        <div class=\"card-header\">\n          <span><i class=\"el-icon-data-line\"></i> 漏洞数量趋势预测 ({{ analysisData.timeRange }})</span>\n        </div>\n      </template>\n      <div class=\"prediction-chart\">\n        <div class=\"chart-container\">\n          <ve-line \n            :data=\"chartData\" \n            :settings=\"chartSettings\"\n            :extend=\"chartExtend\"\n            height=\"400px\">\n          </ve-line>\n        </div>\n      </div>\n    </el-card>\n    \n    <!-- 预测细分分析卡片 -->\n    <el-card class=\"detail-card\">\n      <template v-slot:header>\n        <div class=\"card-header\">\n          <span><i class=\"el-icon-pie-chart\"></i> 预测结果细分</span>\n        </div>\n      </template>\n      <div class=\"prediction-breakdown\">\n        <div class=\"breakdown-chart\">\n          <ve-pie\n            :data=\"breakdownChartData\"\n            :settings=\"pieSettings\"\n            height=\"300px\">\n          </ve-pie>\n        </div>\n        <div class=\"breakdown-stats\">\n          <div v-for=\"(value, key) in analysisData.predictedCounts\" :key=\"key\" class=\"stat-item\">\n            <div class=\"stat-label\">{{ key }}</div>\n            <div class=\"stat-value\">{{ value }}</div>\n            <div class=\"stat-bar\">\n              <div class=\"stat-bar-inner\" :style=\"{ width: `${calculatePercentage(value)}%`, backgroundColor: getSeverityColor(key) }\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </el-card>\n    \n    <!-- 影响因素卡片 -->\n    <el-card class=\"detail-card\">\n      <template v-slot:header>\n        <div class=\"card-header\">\n          <span><i class=\"el-icon-s-marketing\"></i> 趋势影响因素</span>\n        </div>\n      </template>\n      <div class=\"impact-factors\">\n        <el-table :data=\"analysisData.trendFactors\" style=\"width: 100%\">\n          <el-table-column prop=\"factor\" label=\"影响因素\" min-width=\"150\"></el-table-column>\n          <el-table-column label=\"影响程度\" width=\"180\">\n            <template v-slot=\"scope\">\n              <div class=\"impact-gauge\">\n                <div class=\"impact-value\" :class=\"{ 'negative': scope.row.impact < 0 }\">\n                  {{ formatImpact(scope.row.impact) }}\n                </div>\n                <div class=\"impact-bar-container\">\n                  <div \n                    class=\"impact-bar\" \n                    :class=\"{ 'negative': scope.row.impact < 0 }\"\n                    :style=\"{ width: `${Math.abs(scope.row.impact * 100)}%` }\">\n                  </div>\n                </div>\n              </div>\n            </template>\n          </el-table-column>\n          <el-table-column label=\"置信度\" width=\"120\">\n            <template v-slot=\"scope\">\n              <el-progress :percentage=\"scope.row.confidence * 100\" :format=\"percentFormat\"></el-progress>\n            </template>\n          </el-table-column>\n          <el-table-column prop=\"description\" label=\"说明\" min-width=\"250\"></el-table-column>\n        </el-table>\n      </div>\n    </el-card>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'TrendPredictionDetail',\n  props: {\n    analysisData: {\n      type: Object,\n      required: true\n    }\n  },\n  data() {\n    return {\n      chartSettings: {\n        labelMap: {\n          'count': '漏洞数量'\n        },\n        yAxisName: ['数量'],\n        area: true,\n        smooth: true\n      },\n      chartExtend: {\n        series: {\n          areaStyle: {\n            color: {\n              type: 'linear',\n              x: 0,\n              y: 0,\n              x2: 0,\n              y2: 1,\n              colorStops: [{\n                offset: 0, color: 'rgba(64, 158, 255, 0.8)' \n              }, {\n                offset: 1, color: 'rgba(64, 158, 255, 0.1)'\n              }]\n            }\n          },\n          lineStyle: {\n            width: 3\n          },\n          itemStyle: {\n            borderWidth: 2\n          }\n        },\n        xAxis: {\n          axisLabel: {\n            showMaxLabel: true\n          }\n        }\n      },\n      pieSettings: {\n        radius: '65%',\n        offsetY: '60px'\n      }\n    }\n  },\n  computed: {\n    chartData() {\n      // 准备历史数据\n      const historyRows = this.analysisData.historicalData.map(item => ({\n        'date': this.formatDateShort(item.date),\n        'count': item.count\n      }))\n      \n      // 生成预测数据\n      const predictionDates = this.generateFutureDates()\n      \n      // 计算预测趋势值（简单示例）\n      const predictedTotal = Object.values(this.analysisData.predictedCounts).reduce((a, b) => a + b, 0)\n      const lastHistoryValue = historyRows[historyRows.length - 1]?.count || 0\n      \n      const predictionSteps = predictionDates.length\n      const predictionIncrement = (predictedTotal / predictionSteps - lastHistoryValue) / predictionSteps\n      \n      const predictionRows = predictionDates.map((date, index) => ({\n        'date': this.formatDateShort(date),\n        'count': Math.round(lastHistoryValue + predictionIncrement * (index + 1))\n      }))\n      \n      // 合并数据，并标记历史和预测的分界点\n      const boundary = historyRows.length\n      const rows = [...historyRows, ...predictionRows]\n      \n      return {\n        columns: ['date', 'count'],\n        rows,\n        boundary\n      }\n    },\n    breakdownChartData() {\n      const rows = Object.entries(this.analysisData.predictedCounts).map(([severity, count]) => ({\n        'severity': severity,\n        'count': count\n      }))\n      \n      return {\n        columns: ['severity', 'count'],\n        rows\n      }\n    }\n  },\n  methods: {\n    formatDateShort(date) {\n      const d = new Date(date)\n      return `${d.getMonth() + 1}/${d.getDate()}`\n    },\n    generateFutureDates() {\n      // 根据时间范围生成未来日期\n      const days = this.getTimeRangeDays()\n      const today = new Date()\n      \n      return Array.from({ length: days }, (_, i) => {\n        const date = new Date(today)\n        date.setDate(date.getDate() + i + 1)\n        return date\n      })\n    },\n    getTimeRangeDays() {\n      // 将时间范围转换为天数\n      const range = this.analysisData.timeRange\n      \n      if (range.includes('7')) return 7\n      if (range.includes('14')) return 14\n      if (range.includes('30')) return 30\n      if (range.includes('90')) return 90\n      \n      return 30 // 默认30天\n    },\n    formatImpact(impact) {\n      const value = (impact * 100).toFixed(0)\n      return impact >= 0 ? `+${value}%` : `${value}%`\n    },\n    calculatePercentage(value) {\n      const total = Object.values(this.analysisData.predictedCounts).reduce((a, b) => a + b, 0)\n      return total > 0 ? (value / total * 100) : 0\n    },\n    getSeverityColor(severity) {\n      const colorMap = {\n        '高危': '#F56C6C',\n        '中危': '#E6A23C',\n        '低危': '#67C23A',\n        '信息': '#909399'\n      }\n      return colorMap[severity] || '#409EFF'\n    },\n    percentFormat(percentage) {\n      return percentage.toFixed(0) + '%'\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.trend-prediction-detail {\n  .detail-card {\n    margin-bottom: 24px;\n    \n    .card-header {\n      display: flex;\n      align-items: center;\n      \n      i {\n        margin-right: 10px;\n        font-size: 18px;\n      }\n    }\n    \n    .prediction-chart {\n      padding: 10px 0;\n      \n      .chart-container {\n        height: 400px;\n      }\n    }\n    \n    .prediction-breakdown {\n      display: flex;\n      \n      @media (max-width: 992px) {\n        flex-direction: column;\n      }\n      \n      .breakdown-chart {\n        flex: 1;\n      }\n      \n      .breakdown-stats {\n        flex: 1;\n        padding: 20px;\n        \n        .stat-item {\n          margin-bottom: 15px;\n          \n          .stat-label {\n            font-weight: 500;\n            margin-bottom: 5px;\n            display: flex;\n            justify-content: space-between;\n          }\n          \n          .stat-value {\n            font-size: 20px;\n            font-weight: 600;\n            margin-bottom: 8px;\n          }\n          \n          .stat-bar {\n            height: 8px;\n            background-color: #EBEEF5;\n            border-radius: 4px;\n            overflow: hidden;\n            \n            .stat-bar-inner {\n              height: 100%;\n              border-radius: 4px;\n            }\n          }\n        }\n      }\n    }\n    \n    .impact-factors {\n      .impact-gauge {\n        display: flex;\n        align-items: center;\n        \n        .impact-value {\n          width: 60px;\n          text-align: right;\n          padding-right: 10px;\n          font-weight: 500;\n          color: #67C23A;\n          \n          &.negative {\n            color: #F56C6C;\n          }\n        }\n        \n        .impact-bar-container {\n          flex: 1;\n          height: 16px;\n          background-color: #F5F7FA;\n          border-radius: 8px;\n          position: relative;\n          overflow: hidden;\n          \n          .impact-bar {\n            height: 100%;\n            background-color: #67C23A;\n            border-radius: 8px;\n            \n            &.negative {\n              background-color: #F56C6C;\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}