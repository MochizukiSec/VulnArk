{"ast":null,"code":"import \"core-js/modules/es.error.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.date.to-string.js\";\nimport \"core-js/modules/es.number.to-fixed.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.pad-start.js\";\nimport \"core-js/modules/es.string.replace.js\";\n/**\n * 格式化日期函数\n * @param {Date|string} date - 要格式化的日期\n * @param {boolean} showTime - 是否显示时间\n * @returns {string} 格式化后的日期字符串\n */\nexport function formatDate(date) {\n  var showTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (!date) return '';\n  var d = new Date(date);\n  if (isNaN(d.getTime())) return '';\n  var year = d.getFullYear();\n  var month = String(d.getMonth() + 1).padStart(2, '0');\n  var day = String(d.getDate()).padStart(2, '0');\n  if (!showTime) {\n    return \"\".concat(year, \"-\").concat(month, \"-\").concat(day);\n  }\n  var hours = String(d.getHours()).padStart(2, '0');\n  var minutes = String(d.getMinutes()).padStart(2, '0');\n  var seconds = String(d.getSeconds()).padStart(2, '0');\n  return \"\".concat(year, \"-\").concat(month, \"-\").concat(day, \" \").concat(hours, \":\").concat(minutes, \":\").concat(seconds);\n}\n\n/**\n * 格式化数字为千分位分隔\n * @param {number} num - 要格式化的数字\n * @returns {string} 格式化后的数字字符串\n */\nexport function formatNumber(num) {\n  if (num === undefined || num === null) return '';\n  return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\n/**\n * 格式化文件大小\n * @param {number} bytes - 字节数\n * @returns {string} 格式化后的文件大小\n */\nexport function formatFileSize(bytes) {\n  if (bytes === 0) return '0 B';\n  var sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n  var i = Math.floor(Math.log(bytes) / Math.log(1024));\n  return (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sizes[i];\n}","map":{"version":3,"names":["formatDate","date","showTime","arguments","length","undefined","d","Date","isNaN","getTime","year","getFullYear","month","String","getMonth","padStart","day","getDate","concat","hours","getHours","minutes","getMinutes","seconds","getSeconds","formatNumber","num","toString","replace","formatFileSize","bytes","sizes","i","Math","floor","log","pow","toFixed"],"sources":["/Users/yue/Desktop/vuln-Management/frontend/src/utils/format.js"],"sourcesContent":["/**\n * 格式化日期函数\n * @param {Date|string} date - 要格式化的日期\n * @param {boolean} showTime - 是否显示时间\n * @returns {string} 格式化后的日期字符串\n */\nexport function formatDate(date, showTime = false) {\n  if (!date) return '';\n  \n  const d = new Date(date);\n  if (isNaN(d.getTime())) return '';\n  \n  const year = d.getFullYear();\n  const month = String(d.getMonth() + 1).padStart(2, '0');\n  const day = String(d.getDate()).padStart(2, '0');\n  \n  if (!showTime) {\n    return `${year}-${month}-${day}`;\n  }\n  \n  const hours = String(d.getHours()).padStart(2, '0');\n  const minutes = String(d.getMinutes()).padStart(2, '0');\n  const seconds = String(d.getSeconds()).padStart(2, '0');\n  \n  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\n/**\n * 格式化数字为千分位分隔\n * @param {number} num - 要格式化的数字\n * @returns {string} 格式化后的数字字符串\n */\nexport function formatNumber(num) {\n  if (num === undefined || num === null) return '';\n  return num.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',');\n}\n\n/**\n * 格式化文件大小\n * @param {number} bytes - 字节数\n * @returns {string} 格式化后的文件大小\n */\nexport function formatFileSize(bytes) {\n  if (bytes === 0) return '0 B';\n  \n  const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\n  \n  return (bytes / Math.pow(1024, i)).toFixed(2) + ' ' + sizes[i];\n} "],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAUA,CAACC,IAAI,EAAoB;EAAA,IAAlBC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;EAC/C,IAAI,CAACF,IAAI,EAAE,OAAO,EAAE;EAEpB,IAAMK,CAAC,GAAG,IAAIC,IAAI,CAACN,IAAI,CAAC;EACxB,IAAIO,KAAK,CAACF,CAAC,CAACG,OAAO,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE;EAEjC,IAAMC,IAAI,GAAGJ,CAAC,CAACK,WAAW,CAAC,CAAC;EAC5B,IAAMC,KAAK,GAAGC,MAAM,CAACP,CAAC,CAACQ,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACvD,IAAMC,GAAG,GAAGH,MAAM,CAACP,CAAC,CAACW,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAEhD,IAAI,CAACb,QAAQ,EAAE;IACb,UAAAgB,MAAA,CAAUR,IAAI,OAAAQ,MAAA,CAAIN,KAAK,OAAAM,MAAA,CAAIF,GAAG;EAChC;EAEA,IAAMG,KAAK,GAAGN,MAAM,CAACP,CAAC,CAACc,QAAQ,CAAC,CAAC,CAAC,CAACL,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACnD,IAAMM,OAAO,GAAGR,MAAM,CAACP,CAAC,CAACgB,UAAU,CAAC,CAAC,CAAC,CAACP,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACvD,IAAMQ,OAAO,GAAGV,MAAM,CAACP,CAAC,CAACkB,UAAU,CAAC,CAAC,CAAC,CAACT,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAEvD,UAAAG,MAAA,CAAUR,IAAI,OAAAQ,MAAA,CAAIN,KAAK,OAAAM,MAAA,CAAIF,GAAG,OAAAE,MAAA,CAAIC,KAAK,OAAAD,MAAA,CAAIG,OAAO,OAAAH,MAAA,CAAIK,OAAO;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,YAAYA,CAACC,GAAG,EAAE;EAChC,IAAIA,GAAG,KAAKrB,SAAS,IAAIqB,GAAG,KAAK,IAAI,EAAE,OAAO,EAAE;EAChD,OAAOA,GAAG,CAACC,QAAQ,CAAC,CAAC,CAACC,OAAO,CAAC,uBAAuB,EAAE,GAAG,CAAC;AAC7D;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,KAAK,EAAE;EACpC,IAAIA,KAAK,KAAK,CAAC,EAAE,OAAO,KAAK;EAE7B,IAAMC,KAAK,GAAG,CAAC,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAC3C,IAAMC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACL,KAAK,CAAC,GAAGG,IAAI,CAACE,GAAG,CAAC,IAAI,CAAC,CAAC;EAEtD,OAAO,CAACL,KAAK,GAAGG,IAAI,CAACG,GAAG,CAAC,IAAI,EAAEJ,CAAC,CAAC,EAAEK,OAAO,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGN,KAAK,CAACC,CAAC,CAAC;AAChE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}