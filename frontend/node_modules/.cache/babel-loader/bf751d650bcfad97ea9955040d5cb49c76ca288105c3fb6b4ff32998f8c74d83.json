{"ast":null,"code":"import axios from 'axios';\nconst state = {\n  data: {},\n  loading: false,\n  error: null\n};\nconst getters = {\n  dashboardData: state => state.data,\n  isLoading: state => state.loading,\n  error: state => state.error\n};\nconst mutations = {\n  SET_DASHBOARD_DATA(state, data) {\n    state.data = data;\n  },\n  SET_LOADING(state, loading) {\n    state.loading = loading;\n  },\n  SET_ERROR(state, error) {\n    state.error = error;\n  }\n};\nconst actions = {\n  // 获取仪表盘数据\n  async fetchDashboardData({\n    commit\n  }) {\n    try {\n      commit('SET_LOADING', true);\n      const response = await axios.get('/dashboard');\n      commit('SET_DASHBOARD_DATA', response.data);\n      commit('SET_LOADING', false);\n      commit('SET_ERROR', null);\n      return response.data;\n    } catch (error) {\n      const message = error.response?.data?.error || '获取仪表盘数据失败';\n      commit('SET_ERROR', message);\n      commit('SET_LOADING', false);\n      throw error;\n    }\n  },\n  // 重置仪表盘数据\n  resetDashboardData({\n    commit\n  }) {\n    commit('SET_DASHBOARD_DATA', {});\n  }\n};\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n};","map":{"version":3,"names":["axios","state","data","loading","error","getters","dashboardData","isLoading","mutations","SET_DASHBOARD_DATA","SET_LOADING","SET_ERROR","actions","fetchDashboardData","commit","response","get","message","resetDashboardData","namespaced"],"sources":["/Users/yue/Desktop/vuln-Management/frontend/src/store/modules/dashboard.js"],"sourcesContent":["import axios from 'axios'\n\nconst state = {\n  data: {},\n  loading: false,\n  error: null\n}\n\nconst getters = {\n  dashboardData: state => state.data,\n  isLoading: state => state.loading,\n  error: state => state.error\n}\n\nconst mutations = {\n  SET_DASHBOARD_DATA(state, data) {\n    state.data = data\n  },\n  \n  SET_LOADING(state, loading) {\n    state.loading = loading\n  },\n  \n  SET_ERROR(state, error) {\n    state.error = error\n  }\n}\n\nconst actions = {\n  // 获取仪表盘数据\n  async fetchDashboardData({ commit }) {\n    try {\n      commit('SET_LOADING', true)\n      \n      const response = await axios.get('/dashboard')\n      \n      commit('SET_DASHBOARD_DATA', response.data)\n      commit('SET_LOADING', false)\n      commit('SET_ERROR', null)\n      \n      return response.data\n    } catch (error) {\n      const message = error.response?.data?.error || '获取仪表盘数据失败'\n      commit('SET_ERROR', message)\n      commit('SET_LOADING', false)\n      throw error\n    }\n  },\n  \n  // 重置仪表盘数据\n  resetDashboardData({ commit }) {\n    commit('SET_DASHBOARD_DATA', {})\n  }\n}\n\nexport default {\n  namespaced: true,\n  state,\n  getters,\n  mutations,\n  actions\n} "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,KAAK,GAAG;EACZC,IAAI,EAAE,CAAC,CAAC;EACRC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;AAED,MAAMC,OAAO,GAAG;EACdC,aAAa,EAAEL,KAAK,IAAIA,KAAK,CAACC,IAAI;EAClCK,SAAS,EAAEN,KAAK,IAAIA,KAAK,CAACE,OAAO;EACjCC,KAAK,EAAEH,KAAK,IAAIA,KAAK,CAACG;AACxB,CAAC;AAED,MAAMI,SAAS,GAAG;EAChBC,kBAAkBA,CAACR,KAAK,EAAEC,IAAI,EAAE;IAC9BD,KAAK,CAACC,IAAI,GAAGA,IAAI;EACnB,CAAC;EAEDQ,WAAWA,CAACT,KAAK,EAAEE,OAAO,EAAE;IAC1BF,KAAK,CAACE,OAAO,GAAGA,OAAO;EACzB,CAAC;EAEDQ,SAASA,CAACV,KAAK,EAAEG,KAAK,EAAE;IACtBH,KAAK,CAACG,KAAK,GAAGA,KAAK;EACrB;AACF,CAAC;AAED,MAAMQ,OAAO,GAAG;EACd;EACA,MAAMC,kBAAkBA,CAAC;IAAEC;EAAO,CAAC,EAAE;IACnC,IAAI;MACFA,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC;MAE3B,MAAMC,QAAQ,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAAC,YAAY,CAAC;MAE9CF,MAAM,CAAC,oBAAoB,EAAEC,QAAQ,CAACb,IAAI,CAAC;MAC3CY,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;MAC5BA,MAAM,CAAC,WAAW,EAAE,IAAI,CAAC;MAEzB,OAAOC,QAAQ,CAACb,IAAI;IACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;MACd,MAAMa,OAAO,GAAGb,KAAK,CAACW,QAAQ,EAAEb,IAAI,EAAEE,KAAK,IAAI,WAAW;MAC1DU,MAAM,CAAC,WAAW,EAAEG,OAAO,CAAC;MAC5BH,MAAM,CAAC,aAAa,EAAE,KAAK,CAAC;MAC5B,MAAMV,KAAK;IACb;EACF,CAAC;EAED;EACAc,kBAAkBA,CAAC;IAAEJ;EAAO,CAAC,EAAE;IAC7BA,MAAM,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC;EAClC;AACF,CAAC;AAED,eAAe;EACbK,UAAU,EAAE,IAAI;EAChBlB,KAAK;EACLI,OAAO;EACPG,SAAS;EACTI;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}